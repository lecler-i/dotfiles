# pylint: disable=C0111
import sys
import os
from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401
from qutebrowser.config.config import ConfigContainer  # noqa: F401
from qutebrowser import app

#  config = config  # type: ConfigAPI # noqa: F821 pylint: disable=E0602,C0103
c = c  # type: ConfigContainer # noqa: F821 pylint: disable=E0602,C0103
# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

c.aliases = {'w': 'session-save', 'q': 'quit', 'wq': 'quit --save'}

c.completion.height = '25%'

c.content.headers.accept_language = 'en-US,enq=0.5'
c.content.headers.custom = {
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
}
#  c.content.headers.user_agent = 'Mozilla/5.0 (Windows NT 6.1; rv:52.0) Gecko/20100101 Firefox/52.0'

c.content.webgl = False
c.content.pdfjs = False
c.content.plugins = False
c.content.headers.do_not_track = True

c.content.host_blocking.enabled = True

c.content.host_blocking.lists = ['https://raw.github.com/reek/anti-adblock-killer/master/anti-adblock-killer-filters.txt', 'https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn-social/hosts', 'https://www.malwaredomainlist.com/hostslist/hosts.txt',
                                 'http://someonewhocares.org/hosts/hosts', 'http://winhelp2002.mvps.org/hosts.zip', 'http://malwaredomains.lehigh.edu/files/justdomains.zip', 'https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext']

# Open new windows in private browsing mode which does not record
# visited pages.
# Type: Bool
c.content.private_browsing = False

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = -1

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['termite', '-e',
                    "nvim {file} -c 'normal {line}G{column0}l'"]

c.editor.encoding = 'utf-8'

c.fonts.monospace = '"FantasqueSansMono NF", "FantasqueSansMono", "xos4 Terminus", Terminus, Monospace, "DejaVu Sans Mono", Monaco, "Bitstream Vera Sans Mono", "Andale Mono", "Courier New", Courier, "Liberation Mono", monospace, Fixed, Consolas, Terminal'

# Enable Opera-like mouse rocker gestures. This disables the context
# menu.
# Type: Bool
c.input.rocker_gestures = True

c.qt.args = ['disable-reading-from-canvas',
             'ppapi-widevine-path=/usr/lib/qt/plugins/ppapi/libwidevinecdm.so']

c.scrolling.bar = "always"
c.scrolling.smooth = True

c.tabs.position = 'left'

c.url.default_page = 'file:///home/ghjkl/.config/web/startpage/index.html'
c.url.start_pages = 'file:///home/ghjkl/.config/web/startpage/index.html'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {
    'DEFAULT': 'https://www.startpage.com/do/search?prf=bcbe0abdbd142a625d3e86470f55dfdf&q={}',
    '!': 'https://duckduckgo.com/?q=!{}'
}


c.window.title_format = '{perc}{title}{title_sep}{current_url} - qutebrowser'

config.bind(',o', 'set-cmd-text -s :spawn --userscript ripbang')
config.bind(',p', 'spawn --userscript fill_password')
config.bind(',a', 'spawn --userscript toggle_host_blocking')
config.bind(',m', 'spawn --userscript spawn_mpv')
config.bind(',f', 'spawn --userscript ttrss_add')
config.bind(',p', 'spawn --userscript fill_password')
config.bind(',r', 'spawn --userscript readability')
config.bind(',s', 'spawn --userscript view_source')
config.bind(',t', 'set-cmd-text -s :spawn --userscript add_task +qutebrowser')
config.bind('gi', 'hint inputs')

c.content.cookies.store = False

#  print(args)

#  print(c.args)
#  print(config.args)

sys.path.append(os.path.join(sys.path[0], 'jblock'))
print(os.path.join(sys.path[0], 'jblock'))
config.source("jblock/jblock/integrations/qutebrowser.py")

config.source("init_custom_plugins.py")
#  import hook_qutebrowser_init


#  plugin_manager.init_init_hook()

#  def hook_qt_mainloop():
#  sys.path.append(
#  '/home/ghjkl/work/perso/qutebroser/plugins')
#  import buku_integration
#  buku_integration.init()
#  return orig_qt_mainloop()


#  app.qt_mainloop = hook_qt_mainloop

#  sys.path.append("/home/ghjkl/work/perso/qutebroser/plugins/")
#  config.source("buku-integration/qutebrowser.py")
